#ifndef RWA_H
#define RWA_H

#include "Heuristics.h"
#include "AuxiliarMain.h"
#include "Route.h"
#include "Link.h"

/**
 * @brief The RWA class contains Routing and Wavelength Assignment Algorithms.
 */
class RWA {

  public:

    /**
     * @brief eval_Noise evaluates the noise generated by the link.
     * @param Enl is the link.
     * @param Config is the set of parameters over which the evaluation occurs.
     * @param Aux is the set of parameters over which the evaluation occurs.
     * @return the noise generated by the link.
     */
    static long double eval_Noise(Link Enl, Def *Config, AuxiliarMain *Aux);

    /**
     * @brief check_SlotAvailability checks whether route is available for use, with slot s free.
     * @param s is the slot being evaluated.
     * @param Config is the set of parameters over which the checking occurs.
     * @param R is the route.
     * @return true iff the slot is available over the entire route.
     */
    static bool check_SlotAvailability(const Route *, const int s, Def *Config);

    /**
     * @brief Dijkstra runs Dijkstra routing algorithm.
     * @param Aux is the set of parameters over which the algorithm occurs.
     * @param Config is the set of parameters over which the algorithm occurs.
     * @param orN is the id of the origin node.
     * @param deN is the id of the destination node.
     * @param nBitRate is a number identifying the Bitrate in the range of Def::Possible_BitRates.
     * @param Scheme is the modulation scheme.
     */
    static void Dijkstra(AuxiliarMain *Aux, Def *Config, int orN = -1, int deN = -1,
                         int nBitRate = -1, ModulationScheme Scheme = (ModulationScheme) - 1);
    /**
     * @brief FirstFit runs First Fit Spectrum Assignment Algorithm.
     * @param NslotsReq is the number of required slots.
     * @param NslotsUsed is a pointer to the number of used slots. Will be 0 if it's impossible to allocate.
     * @param si is a pointer to the first slot. Will be -1 if it's impossible to allocate.
     * @param Config is the set of parameters over which the algorithm occurs.
     * @param R is the route.
     */
    static void FirstFit(const Route *R, const int NslotsReq, int &NslotsUsed,
                         int &si, Def *Config);

    /**
     * @brief MostUsed runs the Most Used Spectrum Assignment Algorithm.
     * @param NslotsReq is the number of required slots.
     * @param NslotsUsed is a pointer to the number of used slots. Will be 0 if it's impossible to allocate.
     * @param si is a pointer to the first slot. Will be -1 if it's impossible to allocate.
     * @param Config is the set of parameters over which the algorithm occurs.
     * @param route is the route.
     */
    static void MostUsed(const Route *route, const int NslotsReq, int &NslotsUsed, int &si, Def *Config);

    /**
     * @brief OSNRR runs OSNR-R Routing Algorithm.
     * @param Aux is the set of parameters over which the algorithm occurs.
     */
    static void OSNRR(AuxiliarMain *Aux);
    /**
     * @brief Random runs Random Spectrum Assignment Algorithm.
     * @param NslotsReq is the number of required slots.
     * @param NslotsUsed is a pointer to the number of used slots. Will be 0 if it's impossible to allocate.
     * @param si is a pointer to the first slot. Will be -1 if it's impossible to allocate.
     * @param Config is the set of parameters over which the algorithm occurs.
     * @param R is the route.
     */
    static void Random(const Route *R, const int NslotsReq, int &NslotsUsed,
                       int &si,
                       Def *Config);
  private:
    static void search_Route(Node *orN, Node *Current, Node *deN,
                             std::vector<Node *> *Visitados, long double *BestOSNR, Def *Config,
                             AuxiliarMain *Aux);
    static bool verify_Inclusion(Node *No, std::vector<Node *> *Visitados);
    static long double get_LinksWeight(int orN, int deN, Def *Config,
                                       int nBitRate, ModulationScheme Scheme, AuxiliarMain *Aux);
    static int sumOccupation(int s, Def *Config);
};

#endif // RWA_H
