#ifndef LINK_H
#define LINK_H

#include "Node.h"
class AuxiliarMain;

/**
 * @brief The Link class implements a link in the network.
 */
class Link {
  public:
    /**
     * @brief Link is the Link's constructor.
     * @param NSource is a pointer to the Origin Node.
     * @param NDestination is a pointer to the Destination Node.
     * @param Leng is the length, in km, of the link.
     */
    Link(Node *NSource, Node *NDestination, double Leng);

    /**
     * @return the Length of the link.
     */
    double get_Length(void);
    long double get_Weight(Def *, int, long double *Coefficients,
                           int nBitRate, ModulationScheme Scheme, AuxiliarMain *Aux);
    /**
     * @return a pointer to the Origin Node.
     */
    Node *get_SourceNode(void);
    /**
     * @return a pointer to the Destination Node.
     */
    Node *get_DestinationNode(void);
    /**
     * @return the total (linear) gain of the linear amplifiers in the link.
     */
    long double get_LinkGain();
    /**
     * @return the number of line amplifiers in the link.
     */
    int get_NumAmplifiers();
    /**
     * @return the total (linear) loss of the link.
     */
    long double get_LinkLoss();
    /**
     * @return the (linear) gain of the preamplifier.
     */
    long double get_PreamplifierGain();
    /**
     * @return the noise power, in watts, generated by the preamplifier.
     */
    long double get_PreamplifierNoise();
    /**
     * @return the total noise power, in watts, generated by the link.
     */
    long double get_LinkNoise();
    /**
     * @brief set_Length configurates the length of the link.
     * @param Leng is the link length, in km.
     */
    void set_Length(long double Leng);
    /**
     * @brief refresh_Link recalculates the link's parameters.
     * @param Config is the set of parameters over which the parameters will be calculated.
     */
    void refresh_Link(Def *Config);
    /**
     * @brief get_LongestLink returns the longest link in the network.
     * @return the longest link in the network.
     */
    static long double get_LongestLink();
  private:
    double Length;
    Node *Source, *Destination;
    int Num_Amplifiers;
    long double Link_Gain;
    long double IndividualAmplifier_Gain;
    long double Noise_Gain;
    long double Preamplifier_Gain;
    long double Preamplifier_Noise;
    long double L_FB;
    long double L_DCF;
    void eval_Losses();
    void eval_LinkGain();
    void eval_LinkNoise();
    void eval_NumAmplifiers(Def *Config);
    void eval_PreamplifierGainNoise(Def *Config);
};

#endif /* LINK_H */
